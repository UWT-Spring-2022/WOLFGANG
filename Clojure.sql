INSERT IGNORE INTO Clojure VALUES
('Built-in Data Types','','','',1,100),
('Varibles',' ','(def <var-name> <var-value>)','(see below)',2,100),
('Primitive','','','',3,100),
('Integers','Whole numbers','(def <var-name> <var-value>)','(def aInt 15)',4,100),
('Floating point','Decimal numbers','','(def aFloat 1.5)',5,100),
('Char','Just a single character, based of ASCII code','','(def aChar 'a')
(def aChar (97))',6,100),
('Boolean','True / False','','(def aBool true)',7,100),
('String','Some sort of text','','(def aString "Hampton")',8,100),
('Nil','Just a NULL character','','(not nil)',9,100),
('Atom','A reference type that manages state','','(def aAtom (atom 1))',10,100),
('','','','',11,100),
('Structured','','','',12,100),
('Lists','','(list & items)','(list ""Dog"" 1 3.4 true)',13,100),
('Sets','Sets in Clojure are a collection of unique values, created with the set command','(set coll)','(set '(1 2 3 4))',14,100),
('Vectors','A  collection of values indexed by integers, created using the vector method','(vector & items)','(vector (8 22 912))',15,100),
('Maps','A collection of keys and values','','',16,100),
('hashed map','keys support hashCode and is created using the hash-map function','(hash-map & keyvals)','(hash-map "Name" "Derek" "Age" 42)',17,100),
('sorted map','implement Comparable, created using the sorted-map function','(sorted-map & keyvals)','(sorted-map 2 42 2 "Banas" 1 "Derek")',18,100),
('','','','',19,100),
('','','','',20,100),
('','','','',21,100),
('Functions','','','',22,100),
('Regular','Defined with 'defn' macro','','',23,100),
('Anonymous','Essentially functions with no names','','',24,100),
('Multiple Arguments','Clojure supports functions defined with zero or more parameters','','',25,100),
('Variadic','Functions that take in an abitrary numbers of arguments, specified with the '&' ampersand symbol','','',26,100),
('Higher Order','HOFs are functions that take in other functions as arguments','','',27,100),
('Loops','','','',28,100),
('If - else','','','',29,100),
('While','','','',30,100),
('Do While','','','',31,100),
('For','','','',32,100),
('Case','','','',33,100),
('','','','',34,100),
('','','','',35,100),
('','','','',36,100),
('Parameter','','','',37,100),
('Single','A function could have a single, multiple or an abitrary numbers of parameter(s)','[var-name]','',38,100),
('Multiple','','[var-name-1 var-name-2 ...]','',39,100),
('Abitrary','','[& var-name]','',40,100),
('','','','',41,100),
('Return Mechanism','Since Clojure is a functional programming language, everything returns a value, thus there is no need for a return keyword','','',42,100);
