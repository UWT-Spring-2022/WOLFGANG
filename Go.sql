INSERT IGNORE INTO Go VALUES
("Built-in Data Types","","","",1,600),
("Varibles","Variables in Go are immutable and both explicit and implicit. Variables in functions are allocated into stacks unless the compiler cannot prove the variable isnt referenced elsewhere. Since go contains automatic garbage collected, So there is no need to remove variables from memory by the user. Variables are stack, which means they are called within its block, and contain global and local variables.","","",2,600),
("Primitive","In go, primitive types consist of int, float, string and bool. Numeric types can be called with different size bits. Please reference the table below.","","",3,600),
("Integers","Unsign bit integers & Signed bit integers","var <var-name> <type> = <value>","var myInt int = 1",4,600),
("Floating point","Whole or decimal numbers","var name type = val", "var myFloat float = 1.342",5,600),
("Char","N/A","","N/A",6,600),
("Boolean","value consisting of true or false","","var myBool bool = true OR var myBool := false",7,600),
("String","text value","","var myString := Hello, World!",8,600),
("Nil","Null Value","","var myNil int = nil",9,600),
("Atom","N/A","","N/A",10,600),
("","","","",11,600),
("Structs","Similar to C, Go has the capability to create structs. See the table below on how to declare and initialize a struct.","","",12,600),
("Create struct","How to create a struct.","Type Date struct {}","",13,600),
("Declare and initialize","How to declare and initialize a struct.","","",14,600),
("","","","",15,600),
("","","","",16,600),
("","","","",17,600),
("Functions","In the subprogram parameter, there is no default values or support for keyword parameters. The parameters in Go are position, which means that the order of formal values are the same as the order of the actual parameter. Go can call by value and also call by reference.","","",18,600),
("Regular","Receive and return variables","func add(x int, y int) int{}","",19,600),
("Anonymous","Support for nested and anonymous functions","x := func(str string) {}","",20,600),
("Multiple Arguments","Can receive multiple arguments and return multple arguments","func add(x int, y int)","",21,600),
("Variadic","","","",22,600),
("Higher Order","Can receive and/or return a function","Func sum(x int) func(int) int {}","",23,600),
("","","","",24,600),
("","","","",25,600),
("","","","",26,600),
("Parameter","","","",27,600),
("Single","Can be single or multiple, pass by value, or pass by reference. ","","",28,600),
("Multiple","","","",29,600),
("Abitrary","","","",30,600),
("","","","",31,600),
("Return Mechanism","return <value>","","",32,600)
;
