INSERT IGNORE INTO Java VALUES
("Built-in Data Types","","","",1,500),
("Varibles","","(def var-name var-value)","(see below)",2,500),
("Primitive","","","",3,500),
("Integers","Whole numbers","type variableName = value","int x = 5",4,500),
("Floating point","Decimal numbers","","float y = 3.142f",5,500),
("Char","Just a single character, based of ASCII code","","char  c = 'J'",6,500),
("Boolean","True / False","","boolean mybool = true",7,500),
("String","Some sort of text","","String name = John Doe",8,500),
("Null","In Java null is a reserved word (keyword) for literal values","type variableName = (typecast)null","Object myObject = null ",9,500),
("Atom","A reference type that manages state","","AtomicInteger var",10,500),
("","","","",11,500),
("Structured","","","",12,500),
("Lists","A collection of data items","List<Obj> list = new ArrayList<Obj> () ","List<Integer>  list = new ArrayList<Integer>()",13,500),
("Sets","A collection of unique items","Set<Obj> set = new HashSet<Obj> ()","Set<String> hash_set = new HashSet<String>()",14,500),
("Vectors","A  collection of values indexed by integers","Vector vector_name = new Vector()","Vector v = new Vector()",15,500),
("Maps","A collection of keys and values","","",16,500),
("hashed map","Maps that support hashCode","Map<Obj1, Obj2> set = new HashMap<Obj1, Obj2> ()","Map<Integer, String> hmap = new HashMap<>()",17,500),
("sorted map","Maps that implement Comparable","SortedMap<Obj1, Obj2> set = new TreeMap<Obj1, Obj2> ()","SortedMap<Integer, String> tm2= new TreeMap<Integer, String>()",18,500),
("","","","",19,500),
("","","","",20,500),
("","","","",21,500),
("Functions","","","",22,500),
("Regular","Basic functions","static returntype methodname() {}","static void myMethod() {}",23,500),
("Anonymous","Essentially functions with no names","  static returntype methodname() {}","",24,500),
("Multiple Arguments","Java supports functions defined with zero or more parameters","methodName(value1, value2, ..., value3)","Add(10, 5,  20)",25,500),
("Variadic","Functions that take in an abitrary numbers of arguments, specified with the "&" ampersand symbol"," static returntype methodname(int...a) {}"," static void fun(int... a) {}",26,500),
("Higher Order","HOFs are functions that take in other functions as arguments","","",27,500),
("","","","",28,500),
("Parameter","","","",29,500),
("Single","A function could have a single, multiple or an abitrary numbers of parameter(s)"," static returntype methodname(parameter1) {}","static void myMethod(String Fname) {}",30,500),
("Multiple",""," static returntype methodname(parameter1, parameter2) {}"," static void myMethod(String Fname, String Lname, int age){}",31,500),
("Abitrary","","","",32,500),
("","","","",33,500),
("Return Mechanism","If you want the function to return a value, you can use a data type"," static returntype methodname(parameter1) {}","static int myMethod(int a, int b) {return a + b}",34,500)
;
