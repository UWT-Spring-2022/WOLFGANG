INSERT IGNORE INTO CPP VALUES
("Built-in Data Types","","","",1,300),
("Varibles","instances of Objects","type variableName = value","(see below)",2,300),
("Primitive","","","",3,300),
("Integer","Whole numbers","type variableName = value","int x = 5",4,300),
("Floating point","Decimal numbers","","float x = 3.14 ",5,300),
("Char","Characters based of ASCII code","","char c = 'A'",6,300),
("Boolean","True / False","","bool A = true",7,300),
("String","Some sort of text","","string name = Jane Doe",8,300),
("NULL","Just a NULL character","","int y = NULL",9,300),
("Atom","A reference type that manages state","std::atomic<T>::value","struct Sum { int a int b }",10,300),
("","","","",11,300),
("Structured","","","",12,300),
("Lists","A collection of data items","list <datatype> listName","list <int> myList = {1, 2, 3 , 4, 5}",13,300),
("Sets","Associative containers that store unique elements","set<datatype> setName","set<int> mySet={1,2,3,4,5}",14,300),
("Vectors","A collection of values indexed by integers","vector <data-type> vectorName (items)","vector<int> myVectors = {1,2,3,4,5}",15,300),
("Maps","A collection of keys and values","map<datatype1, datatype2>  mapName","map<int, char>  myMap",16,300),
("hashed map","keys support hashCode and is created using the hash-map function","unordered_map<datatype1, datatype2> mapName"," unordered_map<string, int> unorderedmap",17,300),
("sorted map","implement Comparable, created using the sorted-map function","std::map <datatype1, datatype2> mapName","std::map <int, int> orderedmap",18,300),
("","","","",19,300),
("","","","",20,300),
("","","","",21,300),
("Functions","","","",22,300),
("Regular","A function is a group of statements that together perform a task","datatype myFunction() {}","",23,300),
("Anonymous"," Lambda is convenient way of defining an anonymous function object in C++","","",24,300),
("Multiple Arguments","C++ supports functions defined with zero or more parameters"," myFunction(value1, value2, ... , value n) "," Add(10, 5, 2)",25,300),
("Variadic","Functions that take in an abitrary numbers of arguments","datatype myFunction(const datatype...) {}","int printf(const char* format...)",26,300),
("Higher Order","HOFs are functions that take in other functions as arguments. C++11 uses lamdas","",27,300),
("If - else","","if (condition) {} else {}","if (x > y) {}",28,300),
("Parameter","","","",29,300),
("Single","A function could have a single, multiple or an abitrary numbers of parameter(s)","return_type function_name() {}","",30,300),
("Multiple","","return type function_name(paraemter1, parameter2, parameter3) {}","",31,300),
("Abitrary","","return type functionName(datatype, ... ) {}","int sum(int num,...) {}",32,300),
("","","","",33,300),
("Return Mechanism","If you want the function to return a value, you can use a data type.","return type functionName(parameters1, ...) {}","int myFuction(int a, int b){return a + b }
",34,300)
;